---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 34.10.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  interval: 5m
  test:
    enable: false # Enable helm test
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  rollback:
    timeout: 10m
    cleanupOnFail: true
    recreate: true
  values:
    fullnameOverride: prometheus
    alertmanager:
      enabled: true
      config:
        global:
          slack_api_url: "${SECRET_ALERT_MANAGER_DISCORD_WEBHOOK}"
          resolve_timeout: 5m
        #  smtp_smarthost: smtp.gmail.com:587
        #  smtp_auth_username: you@gmail.com
        #  smtp_auth_password: yourapppassword # https://support.google.com/mail/answer/185833?hl=en-GB
        #  smtp_auth_identity: you@gmail.com
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "discord"
          routes:
            - receiver: "null"
              match:
                alertname: InfoInhibitor
            - receiver: 'DeadMansSnitch'
              repeat_interval: 30m
              match:
                alertname: Watchdog
            - receiver: "discord"
              match_re:
                severity: critical
              continue: true
              # - receiver: discord
              #   group_wait: 10s
              #   match_re:
              #     issue: Portworx*
              #   continue: true
        receivers:
          - name: 'null'
          - name: email
            email_configs:
              - send_resolved: true
                to: "${SECRET_EMAIL}"
                from: "prometheus@tuxpeople.org"
                smarthost: "smtp.utils.svc.cluster.local:25"
                require_tls: false
          - name: DeadMansSnitch
            webhook_configs:
              - url: "https://nosnch.in/c15491ac44"
                send_resolved: false
          - name: discord
            webhook_configs:
              - send_resolved: true
                url: 'http://alertmanager-discord:9094'
                # title: |-
                #   [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
                # text: >-
                #   {{ range .Alerts -}}
                #     **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                #   **Description:** {{ if ne .Annotations.description ""}}{{ .Annotations.description }}{{else}}N/A{{ end }}
                #   **Details:**
                #     {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                #     {{ end }}
                #   {{ end }}
          # - name: discord
          #   webhook_configs:
          #     - send_resolved: true
          #       url: 'http://alertmanager-discord:9094'
        # Inhibition rules allow to mute a set of alerts given that another alert is firing.
        # We use this to mute any warning-level notifications if the same alert is already critical.
        inhibit_rules:
          - source_match:
              severity: "critical"
            target_match:
              severity: "warning"
            equal: ["alertname", "namespace"]
      alertmanagerSpec:
        replicas: 1
        # podAntiAffinity: "soft"
        storage:
          volumeClaimTemplate:
            spec:
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 1Gi
        resources:
          limits:
            cpu: 500m
            memory: 400Mi
            #   requests:
            #     cpu: 25m
            #     memory: 32Mi
            # priorityClassName: high-priority
      alertmanagerConfigSelector:
        matchLabels:
          alertmanagerConfig: homelab
      ingress:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: traefik
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          external-dns/is-public: "true"
          external-dns.alpha.kubernetes.io/target: "${SECRET_DOMAIN_TARGET_SKY}"
          traefik.ingress.kubernetes.io/router.middlewares: identity-forward-auth@kubernetescrd
          hajimari.io/enable: "true"
          hajimari.io/icon: "alarm-light"
          hajimari.io/appName: "Alertmanager"
        tls:
          - secretName: "${SECRET_DOMAIN_ME/./-}-tls"
            hosts:
              - alertmanager.${SECRET_DOMAIN_ME}
        hosts:
          - alertmanager.${SECRET_DOMAIN_ME}
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: true
      endpoints:
        - 192.168.8.201
        - 192.168.8.202
        - 192.168.8.203
      service:
        enabled: true
        port: 10259
        targetPort: 10259
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true
    kubeScheduler:
      enabled: true
      endpoints:
        - 192.168.8.201
        - 192.168.8.202
        - 192.168.8.203
      service:
        enabled: true
        port: 10257
        targetPort: 10257
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true
    kubeProxy:
      enabled: true
      endpoints:
        - 192.168.8.201
        - 192.168.8.202
        - 192.168.8.203
    kubeEtcd:
      enabled: true
      endpoints:
        - 192.168.8.201
        - 192.168.8.202
        - 192.168.8.203
      service:
        enabled: true
        port: 2381
        targetPort: 2381
    prometheusOperator:
      prometheusConfigReloader:
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
          limits:
            cpu: 200m
            memory: 100Mi
    prometheus:
      enabled: true
      persistentVolume:
        enabled: true
        size: 10Gi
      # thanosService:
      #   enabled: true
      # thanosServiceMonitor:
      #   enabled: true
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "replica"
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 7d
        enableAdminAPI: true
        walCompression: true
        # thanos:
        #   image: quay.io/thanos/thanos:v0.25.2
        #   version: v0.22.0
        #   objectStorageConfig:
        #     name: thanos-objstore
        #     key: objstore.yml
        additionalScrapeConfigs:
          # - job_name: minio
          #   honor_timestamps: true
          #   metrics_path: /minio/v2/metrics/cluster
          #   static_configs:
          #     - targets:
          #         - "minio.domain.com:9000"
          - job_name: 'octoprint'
            scrape_interval: 1m
            metrics_path: '/plugin/prometheus_exporter/metrics'
            params:
              apikey: ['${SECRET_OCTOPRINTAPI}']
            static_configs:
              - targets: ['octopi.home:80']
          - job_name: 'speedtest-exporter'
            scrape_interval: 1m
            scrape_timeout: 30s
            static_configs:
              - targets: ['speedtest-exporter:9798']
          - job_name: 'mystrom-exporter'
            scrape_interval: 1m
            scrape_timeout: 30s
            static_configs:
              - targets: ['mystrom-3dprinter:9452']
                labels:
                  alias: "3D Drucker"
          - job_name: 'wireguard-exporter'
            scrape_interval: 1m
            scrape_timeout: 30s
            metrics_path: '/metrics'
            static_configs:
              - targets: ['10.20.30.1:9586']
          - job_name: 'node-exporter'
            scrape_interval: 1m
            scrape_timeout: 30s
            honor_timestamps: true
            basic_auth:
              username: randomuser
              password: examplepassword
            static_configs:
              - targets: ['192.168.8.201:9100'] # lab1
                labels:
                  alias: lab1
              - targets: ['192.168.8.202:9100'] # lab2
                labels:
                  alias: lab2
              - targets: ['192.168.8.203:9100'] # lab3
                labels:
                  alias: lab3
              # - targets: ['192.168.8.204:9100'] # lab4
              #   labels:
              #     alias: lab4
      ingress:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: traefik
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          external-dns/is-public: "true"
          external-dns.alpha.kubernetes.io/target: "${SECRET_DOMAIN_TARGET_SKY}"
          traefik.ingress.kubernetes.io/router.middlewares: identity-forward-auth@kubernetescrd
        tls:
          - secretName: prometheus-tls
            hosts:
              - prometheus.${SECRET_DOMAIN_ME}
        hosts:
          - prometheus.${SECRET_DOMAIN_ME}
