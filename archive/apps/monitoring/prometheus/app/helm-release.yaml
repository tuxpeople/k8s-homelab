---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 15m
  timeout: 10m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 46.8.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  test:
    enable: false # Enable helm test
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  rollback:
    timeout: 10m
    cleanupOnFail: true
    recreate: true
  values:
    fullnameOverride: prometheus
    alertmanager:
      enabled: true
      config:
        global:
          slack_api_url: ${SECRET_ALERT_MANAGER_DISCORD_WEBHOOK}
          resolve_timeout: 5m
        #  smtp_smarthost: smtp.gmail.com:587
        #  smtp_auth_username: you@gmail.com
        #  smtp_auth_password: yourapppassword  # https://support.google.com/mail/answer/185833?hl=en-GB
        #  smtp_auth_identity: you@gmail.com
        route:
          group_by:
            - alertname
            - job
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: discord
          routes:
            - receiver: "null"
              match:
                alertname: InfoInhibitor
            - receiver: DeadMansSnitch
              repeat_interval: 30m
              match:
                alertname: Watchdog
            - receiver: discord
              matchers:
                - severity = "critical"
              continue: true
              # - receiver: discord
              #   group_wait: 10s
              #   match_re:
              #     issue: Portworx*
              #   continue: true
        receivers:
          - name: "null"
          - name: email
            email_configs:
              - send_resolved: true
                to: ${SECRET_ACME_EMAIL}
                from: prometheus@tuxpeople.org
                smarthost: smtp.utils.svc.cluster.local:25
                require_tls: false
          - name: DeadMansSnitch
            webhook_configs:
              - url: https://nosnch.in/c15491ac44
                send_resolved: false
          - name: discord
            webhook_configs:
              - send_resolved: true
                url: http://alertmanager-discord:9094
                # title: |-
                #   [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
                # text: >-
                #   {{ range .Alerts -}}
                #     **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                #   **Description:** {{ if ne .Annotations.description ""}}{{ .Annotations.description }}{{else}}N/A{{ end }}
                #   **Details:**
                #     {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                #     {{ end }}
                #   {{ end }}
          # - name: discord
          #   webhook_configs:
          #     - send_resolved: true
          #       url: 'http://alertmanager-discord:9094'
        # Inhibition rules allow to mute a set of alerts given that another alert is firing.
        # We use this to mute any warning-level notifications if the same alert is already critical.
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal:
              - alertname
              - namespace
      alertmanagerSpec:
        replicas: 1
        podAntiAffinity: hard
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: nfs-csi
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 1Gi
        resources:
          limits:
            cpu: 500m
            memory: 400Mi
            #   requests:
            #     cpu: 25m
            #     memory: 32Mi
            # priorityClassName: high-priority
      alertmanagerConfigSelector:
        matchLabels:
          alertmanagerConfig: homelab
      ingress:
        enabled: true
        pathType: Prefix
        annotations:
          kubernetes.io/ingress.class: nginx
          external-dns/is-public: "true"
          external-dns.alpha.kubernetes.io/target: ${SECRET_DNS_TARGET}
          hajimari.io/enable: "true"
          hajimari.io/appName: Alertmanager
          hajimari.io/icon: mdi:alert-decagram-outline
        tls:
          - secretName: ${SECRET_DOMAIN_ME//./-}-tls
            hosts:
              - alertmanager.${SECRET_DOMAIN_ME}
        hosts:
          - alertmanager.${SECRET_DOMAIN_ME}
    kube-state-metrics:
      metricLabelsAllowlist:
        - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: true
      endpoints:
        - 192.168.8.111
        - 192.168.8.112
        - 192.168.8.113
    kubeScheduler:
      enabled: true
      endpoints:
        - 192.168.8.111
        - 192.168.8.112
        - 192.168.8.113
    kubeProxy:
      enabled: true
      endpoints:
        - 192.168.8.111
        - 192.168.8.112
        - 192.168.8.113
    kubeEtcd:
      enabled: true
      endpoints:
        - 192.168.8.111
        - 192.168.8.112
        - 192.168.8.113
      service:
        enabled: true
        port: 2381
        targetPort: 2381
    prometheusOperator:
      prometheusConfigReloader:
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
          limits:
            cpu: 200m
            memory: 100Mi
    prometheus:
      enabled: true
      persistentVolume:
        enabled: true
        size: 10Gi
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
      prometheusSpec:
        replicas: 1
        externalLabels:
          cluster: homelab
        thanos:
          image: quay.io/thanos/thanos:v0.31.0
          objectStorageConfig:
            name: thanos-objstore-secret
            key: objstore.yml
        retention: 12h
        retentionSize: 10GB
        podAntiAffinity: hard
        replicaExternalLabelName: __replica__
        scrapeInterval: 1m
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        enableAdminAPI: true
        walCompression: true
        disableCompaction: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: nfs-csi
              resources:
                requests:
                  storage: 10Gi
        resources:
          requests:
            cpu: 10m
            memory: 2000Mi
          limits:
            memory: 8000Mi
        additionalScrapeConfigs:
          # - job_name: minio
          #   honor_timestamps: true
          #   metrics_path: /minio/v2/metrics/cluster
          #   static_configs:
          #     - targets:
          #         - "minio.domain.com:9000"
          - job_name: octoprint
            scrape_interval: 1m
            metrics_path: /plugin/prometheus_exporter/metrics
            params:
              apikey:
                - ${SECRET_OCTOPRINTAPI}
            static_configs:
              - targets:
                  - octopi.home:80
          - job_name: speedtest-exporter
            scrape_interval: 1m
            scrape_timeout: 30s
            static_configs:
              - targets:
                  - speedtest-exporter:9090
          - job_name: minio-job
            bearer_token: ${SECRET_MINIO_BEARERTOKEN}
            metrics_path: /minio/v2/metrics/cluster
            scheme: http
            static_configs:
              - targets:
                  - minio.lab.tdeutsch.ch:9091
          - job_name: mystrom-exporter
            scrape_interval: 1m
            metrics_path: /device
            honor_labels: true
            static_configs:
              - targets:
                  - 10.20.30.33
                labels:
                  alias: 3D Drucker
            relabel_configs:
              - source_labels:
                  - __address__
                target_label: __param_target
              - target_label: __address__
                replacement: mystrom-3dprinter:9452
          - job_name: prometheus-pushgateway
            scrape_interval: 1m
            scrape_timeout: 30s
            honor_labels: true
            static_configs:
              - targets:
                  - prometheus-pushgateway:9091
          - job_name: wireguard-exporter
            scrape_interval: 1m
            scrape_timeout: 30s
            metrics_path: /metrics
            static_configs:
              - targets:
                  - 10.20.30.1:9586
          - job_name: node-exporter
            scrape_interval: 1m
            scrape_timeout: 30s
            honor_timestamps: true
            # basic_auth:
            #   username: randomuser
            #   password: examplepassword
            static_configs:
              - targets: # k3s-node01
                  - 192.168.8.111:9100
              - targets: # k3s-node02
                  - 192.168.8.112:9100
              - targets: # k3s-node03
                  - 192.168.8.113:9100
              - targets: # NAS
                  - 10.20.30.40:9100
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: nginx
        annotations:
          nginx.ingress.kubernetes.io/auth-method: GET
          nginx.ingress.kubernetes.io/auth-url: https://auth.${SECRET_DOMAIN_ME}/api/verify
          nginx.ingress.kubernetes.io/auth-signin: https://auth.${SECRET_DOMAIN_ME}?rm=$request_method
          nginx.ingress.kubernetes.io/auth-response-headers: Remote-User,Remote-Name,Remote-Groups,Remote-Email
          nginx.ingress.kubernetes.io/auth-snippet:
            proxy_set_header X-Forwarded-Method
            $request_method;
          hajimari.io/enable: "true"
          hajimari.io/appName: Prometheus
          hajimari.io/icon: mdi:fire
          external-dns/is-public: "true"
          external-dns.alpha.kubernetes.io/target: ${SECRET_DNS_TARGET}
        tls:
          - secretName: ${SECRET_DOMAIN_ME//./-}-tls
            hosts:
              - prometheus.${SECRET_DOMAIN_ME}
        hosts:
          - prometheus.${SECRET_DOMAIN_ME}
