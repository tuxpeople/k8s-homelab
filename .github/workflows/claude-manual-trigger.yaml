name: Claude Manual Trigger

on:
  issue_comment:
    types: [created]

jobs:
  claude-instructions:
    if: |
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '@claude-code') &&
      github.actor == 'tuxpeople'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
      contents: read
    
    steps:
      - name: Parse Claude request
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body;
            const claudeMatch = comment.match(/@claude-code\s+(.+)/i);
            
            if (claudeMatch) {
              return claudeMatch[1].trim();
            }
            return "analyze this PR";

      - name: Get PR details
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            return {
              title: pr.title,
              branch: pr.head.ref,
              files: files.map(f => f.filename).slice(0, 20),
            };

      - name: Get recent workflow runs
        id: workflows
        uses: actions/github-script@v7
        with:
          script: |
            const prDetails = JSON.parse(`${{ steps.pr-details.outputs.result }}`);
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: prDetails.branch,
              per_page: 5,
            });
            
            return runs.workflow_runs.map(run => ({
              name: run.name,
              status: run.conclusion,
              url: run.html_url,
            }));

      - name: Add label and reply
        uses: actions/github-script@v7
        with:
          script: |
            const request = `${{ steps.parse.outputs.result }}`;
            const prDetails = JSON.parse(`${{ steps.pr-details.outputs.result }}`);
            const workflows = JSON.parse(`${{ steps.workflows.outputs.result }}`);
            
            // Add label
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['🤖 claude-requested']
            });
            
            // Build comment
            let comment = '## 🤖 Claude Code Instructions\\n\\n';
            comment += `**Request:** ${request}\\n\\n`;
            comment += '### PR Context:\\n';
            comment += `- **Title:** ${prDetails.title}\\n`;
            comment += `- **Branch:** \\`${prDetails.branch}\\`\\n`;
            comment += `- **Files changed:** ${prDetails.files.join(', ')}\\n\\n`;
            comment += '### Recent Workflow Status:\\n';
            
            workflows.forEach(run => {
              const status = run.status === 'success' ? '✅' : 
                           run.status === 'failure' ? '❌' : '🟡';
              comment += `- ${status} [${run.name}](${run.url})\\n`;
            });
            
            comment += '\\n### 💻 Local Command:\\n';
            comment += '```bash\\n';
            comment += 'cd /Volumes/development/github/tuxpeople/k8s-homelab\\n';
            comment += `git checkout ${prDetails.branch}\\n`;
            comment += `claude-code "${request}"\\n`;
            comment += '```\\n\\n';
            comment += '---\\n';
            comment += '*Run this command locally to get Claude\\'s analysis and fixes*';
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });