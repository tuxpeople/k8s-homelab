name: Claude Helper - Failure Notification

on:
  workflow_run:
    workflows: ["Flux Local", "Mise", "ShellCheck"]
    types: [completed]

jobs:
  notify-failure:
    if: |
      github.event.workflow_run.conclusion == 'failure' &&
      github.event.workflow_run.event == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
      actions: read

    steps:
      - name: Get PR number
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${context.payload.workflow_run.head_branch}`,
            });

            if (prs.length > 0) {
              return prs[0].number;
            }
            return null;

      - name: Get workflow logs
        id: logs
        if: steps.pr.outputs.result != 'null'
        uses: actions/github-script@v7
        with:
          script: |
            const workflowRunId = context.payload.workflow_run.id;
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: workflowRunId,
            });

            let failedJobs = [];
            for (const job of jobs.jobs) {
              if (job.conclusion === 'failure') {
                try {
                  const { data: logs } = await github.rest.actions.downloadJobLogsForWorkflowRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    job_id: job.id,
                  });

                  failedJobs.push({
                    name: job.name,
                    logs: logs.toString().substring(0, 2000)
                  });
                } catch (error) {
                  failedJobs.push({
                    name: job.name,
                    logs: 'Error retrieving logs: ' + error.message
                  });
                }
              }
            }

            return JSON.stringify(failedJobs);

      - name: Add label to PR
        if: steps.pr.outputs.result != 'null'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr.outputs.result }};
            await github.rest.issues.addLabels({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['🤖 needs-claude-fix', '🔴 workflow-failed']
            });

      - name: Comment on PR
        if: steps.pr.outputs.result != 'null'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr.outputs.result }};
            const workflowName = '${{ github.event.workflow_run.name }}';
            const runUrl = '${{ github.event.workflow_run.html_url }}';
            const failedJobs = JSON.parse(`${{ steps.logs.outputs.result }}`);

            let comment = '## 🤖 Claude Helper - Workflow Failure\\n\\n';
            comment += `**Workflow:** \\`${workflowName}\\`\\n`;
            comment += '**Status:** ❌ Failed\\n';
            comment += `**Run:** [View Details](${runUrl})\\n\\n`;
            comment += '### Failed Jobs:\\n';

            failedJobs.forEach(job => {
              comment += `\\n#### ${job.name}\\n`;
              comment += '```\\n';
              comment += job.logs;
              comment += '\\n```\\n';
            });

            comment += '\\n### 💡 How to fix:\\n';
            comment += `1. Run locally: \\`claude-code "Analyze the ${workflowName} failure above and suggest fixes"\\`\\n`;
            comment += `2. Or comment: \\`@claude-code please analyze this ${workflowName} failure\\`\\n\\n`;
            comment += '---\\n';
            comment += '*This comment was automatically generated to help with debugging*';

            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
