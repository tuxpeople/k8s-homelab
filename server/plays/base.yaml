---
- name: Base playbook
  hosts: all

  tasks:
    - name: Merge packages lists
      set_fact:
        package_lists_merged: "{{ ansible_linux_base__packages + vars['ansible_linux_' + ansible_os_family|lower + '_base__packages']|default([])  + vars['ansible_linux_' + ansible_os_family|lower + '_' + ansible_distribution_major_version + '_base__packages']|default([]) }}"

    - name: Ensure packages are installed
      package: name={{ package_lists_merged }} state=latest

    - name: 'Upgrade all installed packages'
      package: name="*" state=latest
      register: package_update

    - name: Install Extra packages if set
      package: name={{ ansible_linux_base__packages_extra }} state=latest
      when: ansible_linux_base__packages_extra is defined

    - name: Install packages for VMs
      package: name={{ ansible_linux_vm_base__packages }} state=latest
      when: ansible_linux_vm_base__packages is defined and ansible_virtualization_role == "guest"

    - name: Remove packages for for physical machines
      package: name={{ ansible_linux_physical_base__packages }} state=absent
      when: ansible_linux_physical_base__packages is defined and ansible_virtualization_role == "guest"

    - name: Install packages for physical machines
      package: name={{ ansible_linux_physical_base__packages }} state=latest
      when:
        - ansible_linux_physical_base__packages is defined and ansible_virtualization_role != "guest"
        - ansible_virtualization_role != "guest"
        - ansible_architecture != "armv6l"
        - ansible_architecture != "armv7l"
        - ansible_architecture != "aarch64"
        - ansible_board_vendor != "Apple Inc."

    - name: Remove packages for VMs
      package: name={{ ansible_linux_vm_base__packages }} state=absent
      when: ansible_linux_vm_base__packages is defined and ansible_virtualization_role != "guest"

    - name: Enable services
      systemd:
        name: "{{ ansible_linux_base__services }}"
        state: started
        enabled: yes
        daemon_reload: yes
      when: ansible_linux_base__services is defined

    - name: Firewall
      import_role:
        name: robertdebock.roles.firewall

    - name: "Open Firewall for vrrp (keepalived)"
      firewalld:
        rich_rule: rule protocol value="vrrp" accept
        permanent: yes
        state: enabled
        immediate: yes
      when: ansible_os_family == "RedHat"

    - name: "Open Firewall for vrrp (keepalived) on RHEL"
      firewalld:
        rich_rule: rule protocol value="vrrp" accept
        permanent: yes
        state: enabled
        immediate: yes
      when: ansible_os_family == "RedHat"

    # - name: "Open Firewall for vrrp (keepalived) on Debian/Ubuntu"
    #   ansible.builtin.shell: |
    #     ufw allow from 224.0.0.18
    #     ufw allow to 224.0.0.18
    #   when: ansible_os_family == "Debian"

    - name: Open firewall for Nodes
      firewalld:
        port: "{{ item }}"
        permanent: true
        immediate: true
        state: enabled
      with_items:
        - 22/tcp
        - 80/tcp
        - 443/tcp
        - 2376/tcp
        - 2379/tcp
        - 2380/tcp
        - 6443/tcp
        - 8472/udp
        - 9099/tcp
        - 10250/tcp
        - 10254/tcp
        - 30000-32767/tcp
        - 30000-32767/udp
      when: ansible_os_family == "RedHat"

    - name: Wirguard repos (RHEL)
      ansible.builtin.yum:
        name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm https://www.elrepo.org/elrepo-release-8.el8.elrepo.noarch.rpm"
        state: present
      when: ansible_os_family == "RedHat"

    - name: Wirguard packages (RHEL)
      ansible.builtin.yum:
        name: "kmod-wireguard"
        state: present
        update_cache: true
      when: ansible_os_family == "RedHat"

    # - name: Wirguard packages (Debian)
    #   ansible.builtin.apt:
    #     name: "wireguard-linux-compat"
    #     state: present
    #     update_cache: true
    #   when: ansible_os_family == "Debian"

    - name: Update max_user_watches
      ansible.posix.sysctl:
        name: fs.inotify.max_user_watches
        value: "65536"
        state: present
        sysctl_file: /etc/sysctl.d/98-kubernetes-fs.conf

    - name: Ubuntu stuff
      block:
        - name: Check for bridge-nf-call-iptables
          ansible.builtin.stat:
            path: /proc/sys/net/bridge/bridge-nf-call-iptables
          register: bridge_nf_call_iptables_result

        - name: Set Kubernetes network configuration
          ansible.builtin.blockinfile:
            path: /etc/sysctl.d/99-kubernetes-cri.conf
            mode: 0644
            create: true
            block: |
              net.ipv4.ip_forward = 1
              net.bridge.bridge-nf-call-iptables = 1
              net.ipv6.conf.all.forwarding = 1
              net.bridge.bridge-nf-call-ip6tables = 1
          when:
            - bridge_nf_call_iptables_result.stat.exists
          register: sysctl_network

        - name: Reload Kubernetes network configuration
          ansible.builtin.shell: sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf
          when:
            - sysctl_network.changed
            - bridge_nf_call_iptables_result.stat.exists

        - name: Install common packages
          ansible.builtin.apt:
            name:
              - apt-transport-https
              - arptables
              - ca-certificates
              - curl
              - ebtables
              - iputils-ping
              - ipvsadm
              - lvm2
              - net-tools
              - nfs-common
              - open-iscsi
              - psmisc
              - smartmontools
              - software-properties-common
              - unattended-upgrades
            install_recommends: false
            update_cache: true
            cache_valid_time: 3600
            autoclean: true
            autoremove: true
          register: apt_install_common
          retries: 5
          until: apt_install_common is success

        - name: Copy 20auto-upgrades unattended-upgrades config
          ansible.builtin.blockinfile:
            path: /etc/apt/apt.conf.d/20auto-upgrades
            mode: 0644
            create: true
            block: |
              APT::Periodic::Update-Package-Lists "1";
              APT::Periodic::Download-Upgradeable-Packages "1";
              APT::Periodic::AutocleanInterval "7";
              APT::Periodic::Unattended-Upgrade "1";
        - name: Copy 50unattended-upgrades unattended-upgrades config
          ansible.builtin.blockinfile:
            path: /etc/apt/apt.conf.d/50unattended-upgrades
            mode: 0644
            create: true
            block: |
              Unattended-Upgrade::Automatic-Reboot "false";
              Unattended-Upgrade::Remove-Unused-Dependencies "true";
              Unattended-Upgrade::Allowed-Origins {
                  "${distro_id} stable";
                  "${distro_id} ${distro_codename}-security";
                  "${distro_id} ${distro_codename}-updates";
              };
        - name: Start unattended-upgrades service
          ansible.builtin.systemd:
            name: unattended-upgrades
            enabled: true
            state: started

        - name: Restart unattended-upgrades service
          ansible.builtin.service:
            name: unattended-upgrades.service
            daemon_reload: true
            enabled: true
            state: restarted
      when: ansible_os_family == "Debian"

    - name: Reboot
      import_role:
        name: oasis_roles.system.reboot
      when: package_update is changed
