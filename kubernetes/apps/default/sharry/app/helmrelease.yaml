---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app sharry
  namespace: default
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 1.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 2
  install:
    crds: CreateReplace
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    crds: CreateReplace
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  dependsOn:
    - name: traefik
      namespace: networking
  values:
    image:
      repository: eikek0/sharry
      tag: v1.12.1
    service:
      main:
        ports:
          http:
            port: &port 9090
    args:
      - /opt/sharry.conf
    env:
      TZ: ${TIMEZONE}
    configMaps:
      config:
        enabled: true
        data:
          sharry.conf: |
            sharry.restserver {
              base-url = "https://sharry.${SECRET_DOMAIN}"
              bind {
                address = "0.0.0.0"
                port = {{ .Values.service.main.ports.http.port }}
              }
            # How files are stored.
            files {
              # The id of an enabled store from the `stores` array that should
              # be used.
              default-store = "filesystem"
              stores = {
                filesystem =
                  { enabled = true
                    type = "file-system"
                    directory = "/data"
                    # If true, empty directories that can be left behind after deleting
                    # a file are removed as well.
                    clean-empty-dirs = true
                  }
              }
              }
              backend {
                signup {
                  mode = "closed"
                }
                auth {
                  fixed {
                    enabled = false  # set to true to enable this auth provider
                    user = "admin"
                    password = "admin"
                    order = 10
                  }
                  oauth = [
                      {
                        enabled = true
                        id = "authelia"
                        name = "Homelab Account"
                        icon = "fas fa-address-book"
                        scope = "profile openid email",
                        authorize-url = "https://auth.${SECRET_DOMAIN}/api/oidc/authorization"
                        token-url = "https://auth.${SECRET_DOMAIN}/api/oidc/token"
                        user-url = "https://auth.${SECRET_DOMAIN}/api/oidc/userinfo"
                        user-id-key = "preferred_username"
                        client-id = "sharry"
                        client-secret = "${SECRET_OIDC_CLIENT_SECRET_SHARRY}"
                      }
                  ]
                }
              }
              # Configures logging
              logging {
                # The format for the log messages. Can be one of:
                # Json, Logfmt, Fancy or Plain
                format = "Fancy"

                # The minimum level to log. From lowest to highest:
                # Trace, Debug, Info, Warn, Error
                minimum-level = "Info"

                # Override the log level of specific loggers
                levels = {
                  "sharry.restserver.oauth.CodeFlow" = "Trace"
                  "sharry.restserver.routes.LoginRoutes" = "Trace"
                }
              }
            }
    persistence:
      config:
        enabled: true
        type: configMap
        subPath: sharry.conf
        name: sharry-config
        items:
          - key: sharry.conf
            path: sharry.conf
        mountPath: /opt/sharry.conf
      data:
        enabled: true
        type: pvc
        accessMode: ReadWriteOnce
        size: 10Gi
        mountPath: /data
        storageClass: local-path
    ingress:
      main:
        enabled: true
        ingressClassName: traefik
        annotations:
          external-dns.alpha.kubernetes.io/target: ${SECRET_DNS_TARGET}
          hajimari.io/icon: file-arrow-up-down-outline
        hosts:
          - host: &host '{{ .Release.Name }}.${SECRET_DOMAIN}'
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - *host
            secretName: ${SECRET_DOMAIN/./-}-production-tls
    resources:
      requests:
        cpu: 5m
        memory: 10Mi
      limits:
        memory: 1Gi
