---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app kube-prometheus-stack
spec:
  interval: 1h
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 77.12.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  install:
    crds: Skip
    remediation:
      retries: 3
  upgrade:
    crds: Skip
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    cleanPrometheusOperatorObjectNames: true
    kubeApiServer:
      enabled: true
      serviceMonitor:
        interval: 60s
        metricRelabelings: [] # Option: leer lassen oder gezielt konfigurieren
    kubeControllerManager:
      enabled: true
      serviceMonitor:
        interval: 60s
        metricRelabelings: []
    kubeScheduler:
      enabled: true
      serviceMonitor:
        interval: 60s
        metricRelabelings: []
    kubelet:
      enabled: true
      serviceMonitor:
        interval: 60s
    prometheus:
      ingress:
        enabled: true
        ingressClassName: internal
        annotations:
          hajimari.io/appName: Prometheus
          hajimari.io/icon: simple-icons:prometheus
          nginx.ingress.kubernetes.io/ssl-redirect: "false"
        hosts:
          - prometheus.${SECRET_DOMAIN}
        tls:
          - hosts:
              - prometheus.${SECRET_DOMAIN}
      prometheusSpec:
        scrapeInterval: 60s
        evaluationInterval: 60s
        enableAdminAPI: true
        retentionSize: 2GiB
        replicas: 1
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1024Mi
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: ${MAIN_SC}
              resources:
                requests:
                  storage: 12Gi
    alertmanager:
      alertmanagerSpec:
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 400Mi
      enabled: true
      config:
        global:
          slack_api_url: ${SECRET_ALERT_MANAGER_DISCORD_WEBHOOK}
          resolve_timeout: 5m
        #  smtp_smarthost: smtp.gmail.com:587
        #  smtp_auth_username: you@gmail.com
        #  smtp_auth_password: yourapppassword  # https://support.google.com/mail/answer/185833?hl=en-GB
        #  smtp_auth_identity: you@gmail.com
        route:
          group_by:
            - alertname
            - job
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: discord
          routes:
            - receiver: "null"
              match:
                alertname: InfoInhibitor
            - receiver: "null"
              match:
                alertname: CPUThrottlingHigh
            - receiver: DeadMansSnitch
              repeat_interval: 30m
              match:
                alertname: Watchdog
            - receiver: discord
              matchers:
                - severity = "critical"
              continue: true
              # - receiver: discord
              #   group_wait: 10s
              #   match_re:
              #     issue: Portworx*
              #   continue: true
        receivers:
          - name: "null"
          - name: email
            email_configs:
              - send_resolved: true
                to: ${SECRET_ACME_EMAIL}
                from: prometheus@tuxpeople.org
                smarthost: smtp.utils.svc.cluster.local:25
                require_tls: false
          - name: DeadMansSnitch
            webhook_configs:
              - url: https://nosnch.in/c15491ac44
                send_resolved: false
          - name: discord
            webhook_configs:
              - send_resolved: true
                url: http://alertmanager-discord:9094
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal:
              - alertname
              - namespace
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: internal
        annotations:
          hajimari.io/appName: Alertmanager
          hajimari.io/icon: mdi:alert-decagram-outline
        tls:
          - secretName: ${SECRET_DOMAIN/./-}-production-tls
            hosts:
              - alertmanager.${SECRET_DOMAIN}
        hosts:
          - alertmanager.${SECRET_DOMAIN}
