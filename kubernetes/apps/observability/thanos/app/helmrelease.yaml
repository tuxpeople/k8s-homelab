---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app thanos
spec:
  interval: 30m
  chart:
    spec:
      chart: thanos
      version: 15.7.25
      sourceRef:
        kind: HelmRepository
        name: bitnami
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    objstoreConfig:
      type: s3
      config:
        insecure: true
    queryFrontend:
      enabled: false
    query:
      enabled: true
      replicaCount: 1
      replicaLabels:
        - replica
      dnsDiscovery:
        sidecarsService: kube-prometheus-stack-thanos-discovery
        sidecarsNamespace: observability
      ingress:
        enabled: true
        hostname: thanos.${SECRET_DOMAIN}
        ingressClassName: internal
        tls: true
    bucketweb:
      enabled: true
      replicaCount: 1
    compactor:
      enabled: true
      extraFlags: ["--compact.concurrency", "4"]
      retentionResolutionRaw: 7d
      retentionResolution5m: 14d
      retentionResolution1h: 30d
      persistence:
        enabled: true
        size: 10Gi
      ingress:
        enabled: true
        hostname: thanos-compactor.${SECRET_DOMAIN}
        ingressClassName: internal
        tls: true
    storegateway:
      enabled: true
      replicaCount: 1
      persistence:
        enabled: true
        size: 10Gi
    ruler:
      enabled: true
      replicaCount: 1
      dnsDiscovery:
        enabled: true
      alertmanagers:
        [
          http://kube-prometheus-stack-alertmanager.observability.svc.cluster.local:9093,
        ]
      extraFlags: ["--web.prefix-header=X-Forwarded-Prefix"]
      config: |-
        groups:
          - name: "PrometheusWatcher"
            rules:
              - alert: "PrometheusDown"
                expr: absent(up{job="kube-prometheus-stack-prometheus"})
      ingress:
        enabled: true
        hostname: thanos-ruler.${SECRET_DOMAIN}
        ingressClassName: internal
        tls: true
      persistence:
        enabled: true
        size: 10Gi
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    volumePermissions:
      enabled: true
  valuesFrom:
    - targetPath: objstoreConfig.config.bucket
      kind: Secret
      name: thanos-bucket
      valuesKey: BUCKET_NAME
    - targetPath: objstoreConfig.config.endpoint
      kind: Secret
      name: thanos-bucket
      valuesKey: BUCKET_HOST
    - targetPath: objstoreConfig.config.region
      kind: Secret
      name: thanos-bucket
      valuesKey: BUCKET_REGION
    - targetPath: objstoreConfig.config.access_key
      kind: Secret
      name: thanos-bucket
      valuesKey: AWS_ACCESS_KEY_ID
    - targetPath: objstoreConfig.config.secret_key
      kind: Secret
      name: thanos-bucket
      valuesKey: AWS_SECRET_ACCESS_KEY
